== doSmth ==
fun doSmth() {}
---------------------
L0:
    <START>    
    read (Unit)
L1:
    <END>          NEXT:[<SINK>]     
error:
    <ERROR>        PREV:[]
sink:
    <SINK>         PREV:[<ERROR>, <END>]
=====================
== doSmth1 ==
fun doSmth1() {}
---------------------
L0:
    <START>    
    read (Unit)
L1:
    <END>          NEXT:[<SINK>]     
error:
    <ERROR>        PREV:[]
sink:
    <SINK>         PREV:[<ERROR>, <END>]
=====================
== doSmth2 ==
fun doSmth2() {}
---------------------
L0:
    <START>    
    read (Unit)
L1:
    <END>          NEXT:[<SINK>]     
error:
    <ERROR>        PREV:[]
sink:
    <SINK>         PREV:[<ERROR>, <END>]
=====================
== cond ==
fun cond() {}
---------------------
L0:
    <START>    
    read (Unit)
L1:
    <END>          NEXT:[<SINK>]     
error:
    <ERROR>        PREV:[]
sink:
    <SINK>         PREV:[<ERROR>, <END>]
=====================
== testCopy1 ==
fun testCopy1() : Int {
    try {
        doSmth()
    }
    catch (e: NullPointerException) {
        doSmth1()
    }
    catch (e: Exception) {
        doSmth2()
    }
    finally {
        return 1
    }
}
---------------------
L0:
    <START>                             
    jmp?(L2 [onException])                  NEXT:[jmp?(L5 [catch 0]), jmp?(L3 [onExceptionToFinallyBlock])]
    jmp?(L3 [onExceptionToFinallyBlock])    NEXT:[r(1), call(doSmth, doSmth)]                              
    call(doSmth, doSmth)                
    jmp(L4 [afterCatches])                  NEXT:[jmp(L6 [skipFinallyToErrorBlock])]                       
L2 [onException]:
    jmp?(L5 [catch 0])                      NEXT:[v(e: Exception), v(e: NullPointerException)]                 PREV:[jmp?(L2 [onException])]
    v(e: NullPointerException)          
    w(e)                                
    call(doSmth1, doSmth1)              
    jmp(L4 [afterCatches])                  NEXT:[jmp(L6 [skipFinallyToErrorBlock])]                       
L5 [catch 0]:
    v(e: Exception)                         PREV:[jmp?(L5 [catch 0])]
    w(e)                                
    call(doSmth2, doSmth2)              
    jmp(L4 [afterCatches])              
L4 [afterCatches]:
    jmp(L6 [skipFinallyToErrorBlock])       NEXT:[r(1)]                                                        PREV:[jmp(L4 [afterCatches]), jmp(L4 [afterCatches]), jmp(L4 [afterCatches])]
L3 [onExceptionToFinallyBlock]:
L7 [start finally]:
    r(1)                                    PREV:[jmp?(L3 [onExceptionToFinallyBlock])]
    ret(*) L1                               NEXT:[<END>]                                                   
L8 [finish finally]:
-   jmp(error)                              NEXT:[<ERROR>]                                                     PREV:[]
L6 [skipFinallyToErrorBlock]:
    r(1)                                    PREV:[jmp(L6 [skipFinallyToErrorBlock])]
    ret(*) L1                           
L1:
    <END>                                   NEXT:[<SINK>]                                                      PREV:[ret(*) L1, ret(*) L1]
error:
    <ERROR>                                 PREV:[]
sink:
    <SINK>                                  PREV:[<ERROR>, <END>]
=====================
== testCopy2 ==
fun testCopy2() {
    while (cond()) {
        try {
            doSmth()
        }
        catch (e: NullPointerException) {
            doSmth1()
        }
        catch (e: Exception) {
            doSmth2()
        }
        finally {
            if (cond()) return
            else continue
        }
    }
}
---------------------
L0:
    <START>                             
L2 [loop entry point]:
L5 [condition entry point]:
    call(cond, cond)                        PREV:[<START>, jmp(L2 [loop entry point]), jmp(L2 [loop entry point])]
    jf(L3 [loop exit point])                NEXT:[read (Unit), jmp?(L6 [onException])]                     
L4 [body entry point]:
    jmp?(L6 [onException])                  NEXT:[jmp?(L9 [catch 0]), jmp?(L7 [onExceptionToFinallyBlock])]
    jmp?(L7 [onExceptionToFinallyBlock])    NEXT:[call(cond, cond), call(doSmth, doSmth)]                  
    call(doSmth, doSmth)                
    jmp(L8 [afterCatches])                  NEXT:[jmp(L10 [skipFinallyToErrorBlock])]                      
L6 [onException]:
    jmp?(L9 [catch 0])                      NEXT:[v(e: Exception), v(e: NullPointerException)]                 PREV:[jmp?(L6 [onException])]
    v(e: NullPointerException)          
    w(e)                                
    call(doSmth1, doSmth1)              
    jmp(L8 [afterCatches])                  NEXT:[jmp(L10 [skipFinallyToErrorBlock])]                      
L9 [catch 0]:
    v(e: Exception)                         PREV:[jmp?(L9 [catch 0])]
    w(e)                                
    call(doSmth2, doSmth2)              
    jmp(L8 [afterCatches])              
L8 [afterCatches]:
    jmp(L10 [skipFinallyToErrorBlock])      NEXT:[call(cond, cond)]                                            PREV:[jmp(L8 [afterCatches]), jmp(L8 [afterCatches]), jmp(L8 [afterCatches])]
L7 [onExceptionToFinallyBlock]:
L11 [start finally]:
    call(cond, cond)                        PREV:[jmp?(L7 [onExceptionToFinallyBlock])]
    jf(L12)                                 NEXT:[jmp(L2 [loop entry point]), ret L1]                      
    ret L1                                  NEXT:[<END>]                                                   
-   jmp(L13)                                NEXT:[jmp(error)]                                                  PREV:[]
L12:
    jmp(L2 [loop entry point])              NEXT:[call(cond, cond)]                                            PREV:[jf(L12)]
L13:
L14 [finish finally]:
-   jmp(error)                              NEXT:[<ERROR>]                                                     PREV:[]
L10 [skipFinallyToErrorBlock]:
    call(cond, cond)                        PREV:[jmp(L10 [skipFinallyToErrorBlock])]
    jf(copy L12)                            NEXT:[jmp(L2 [loop entry point]), ret L1]                      
    ret L1                                  NEXT:[<END>]                                                   
-   jmp(copy L13)                           NEXT:[jmp(L2 [loop entry point])]                                  PREV:[]
    jmp(L2 [loop entry point])              NEXT:[call(cond, cond)]                                            PREV:[jf(copy L12)]
-   jmp(L2 [loop entry point])              NEXT:[call(cond, cond)]                                            PREV:[]
L3 [loop exit point]:
    read (Unit)                             PREV:[jf(L3 [loop exit point])]
L1:
    <END>                                   NEXT:[<SINK>]                                                      PREV:[ret L1, ret L1, read (Unit)]
error:
    <ERROR>                                 PREV:[]
sink:
    <SINK>                                  PREV:[<ERROR>, <END>]
=====================
== testCopy3 ==
fun testCopy3() {
    try {
        doSmth()
    }
    catch (e: NullPointerException) {
        doSmth1()
    }
    catch (e: Exception) {
        doSmth2()
    }
    finally {
        while (cond());
    }
}
---------------------
L0:
    <START>                             
    jmp?(L2 [onException])                  NEXT:[jmp?(L5 [catch 0]), jmp?(L3 [onExceptionToFinallyBlock])]
    jmp?(L3 [onExceptionToFinallyBlock])    NEXT:[call(cond, cond), call(doSmth, doSmth)]                  
    call(doSmth, doSmth)                
    jmp(L4 [afterCatches])                  NEXT:[jmp(L6 [skipFinallyToErrorBlock])]                       
L2 [onException]:
    jmp?(L5 [catch 0])                      NEXT:[v(e: Exception), v(e: NullPointerException)]                 PREV:[jmp?(L2 [onException])]
    v(e: NullPointerException)          
    w(e)                                
    call(doSmth1, doSmth1)              
    jmp(L4 [afterCatches])                  NEXT:[jmp(L6 [skipFinallyToErrorBlock])]                       
L5 [catch 0]:
    v(e: Exception)                         PREV:[jmp?(L5 [catch 0])]
    w(e)                                
    call(doSmth2, doSmth2)              
    jmp(L4 [afterCatches])              
L4 [afterCatches]:
    jmp(L6 [skipFinallyToErrorBlock])       NEXT:[call(cond, cond)]                                            PREV:[jmp(L4 [afterCatches]), jmp(L4 [afterCatches]), jmp(L4 [afterCatches])]
L3 [onExceptionToFinallyBlock]:
L7 [start finally]:
L8 [loop entry point]:
L11 [condition entry point]:
    call(cond, cond)                        PREV:[jmp?(L3 [onExceptionToFinallyBlock]), jmp(L8 [loop entry point])]
    jf(L9 [loop exit point])                NEXT:[read (Unit), jmp(L8 [loop entry point])]                 
L10 [body entry point]:
    jmp(L8 [loop entry point])              NEXT:[call(cond, cond)]                                        
L9 [loop exit point]:
    read (Unit)                             PREV:[jf(L9 [loop exit point])]
L12 [finish finally]:
    jmp(error)                              NEXT:[<ERROR>]                                                 
L6 [skipFinallyToErrorBlock]:
    call(cond, cond)                        PREV:[jmp(L6 [skipFinallyToErrorBlock]), jmp(copy L8 [loop entry point])]
    jf(copy L9 [loop exit point])           NEXT:[read (Unit), jmp(copy L8 [loop entry point])]            
    jmp(copy L8 [loop entry point])         NEXT:[call(cond, cond)]                                        
    read (Unit)                             PREV:[jf(copy L9 [loop exit point])]
L1:
    <END>                                   NEXT:[<SINK>]                                                  
error:
    <ERROR>                                 PREV:[jmp(error)]
sink:
    <SINK>                                  PREV:[<ERROR>, <END>]
=====================
== doTestCopy4 ==
fun doTestCopy4(list: List<String>?) : Int {
    try {
        doSmth()
    }
    finally {
        if(list != null) {
        }
    }
}
---------------------
L0:
    <START>                             
    v(list: List<String>?)              
    w(list)                             
    jmp?(L2 [onExceptionToFinallyBlock])    NEXT:[r(list), call(doSmth, doSmth)]       
    call(doSmth, doSmth)                
    jmp(L3 [skipFinallyToErrorBlock])       NEXT:[r(list)]                             
L2 [onExceptionToFinallyBlock]:
L4 [start finally]:
    r(list)                                 PREV:[jmp?(L2 [onExceptionToFinallyBlock])]
    r(null)                             
    call(list != null, equals)          
    jf(L5)                                  NEXT:[read (Unit), read (Unit)]            
    read (Unit)                         
    jmp(L6)                                 NEXT:[jmp(error)]                          
L5:
    read (Unit)                             PREV:[jf(L5)]
L6:
L7 [finish finally]:
    jmp(error)                              NEXT:[<ERROR>]                                 PREV:[jmp(L6), read (Unit)]
L3 [skipFinallyToErrorBlock]:
    r(list)                                 PREV:[jmp(L3 [skipFinallyToErrorBlock])]
    r(null)                             
    call(list != null, equals)          
    jf(copy L5)                             NEXT:[read (Unit), read (Unit)]            
    read (Unit)                         
    jmp(copy L6)                            NEXT:[<END>]                               
    read (Unit)                             PREV:[jf(copy L5)]
L1:
    <END>                                   NEXT:[<SINK>]                                  PREV:[jmp(copy L6), read (Unit)]
error:
    <ERROR>                                 PREV:[jmp(error)]
sink:
    <SINK>                                  PREV:[<ERROR>, <END>]
=====================
